// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// نموذج السيارات
model Car {
  id          Int      @id @default(autoincrement())
  name        String
  brand       String
  year        Int
  price       Float
  mileage     Int?
  fuelType    String?
  transmission String?
  color       String?
  description String?
  imageUrl    String?
  images      String[] @default([]) // <-- جديد: مصفوفة الصور المتعددة
  contactName String?              // <-- اسم البائع
  contactPhone String?             // <-- رقم هاتف البائع
  contactLocation String?          // <-- موقع البائع
  contactEmail String?             // <-- بريد البائع الإلكتروني
  isAvailable Boolean  @default(true)
  featured    Boolean  @default(false) // <-- جديد: هل السيارة مميزة؟
  status      CarStatus @default(PENDING) // <-- جديد: حالة الموافقة
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // العلاقات
  sellerId    Int?
  seller      User?    @relation(fields: [sellerId], references: [id])
  orders      Order[]
  reviews     Review[]
  
  @@map("cars")
}

// نموذج المستخدمين
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String?
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // العلاقات
  cars      Car[]
  orders    Order[]
  reviews   Review[]
  
  @@map("users")
}

// نموذج الطلبات
model Order {
  id        Int       @id @default(autoincrement())
  userId    Int
  carId     Int
  status    OrderStatus @default(PENDING)
  totalPrice Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // العلاقات
  user      User      @relation(fields: [userId], references: [id])
  car       Car       @relation(fields: [carId], references: [id])
  
  @@map("orders")
}

// نموذج التقييمات
model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  carId     Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  
  // العلاقات
  user      User     @relation(fields: [userId], references: [id])
  car       Car      @relation(fields: [carId], references: [id])
  
  @@map("reviews")
}

enum UserRole {
  ADMIN
  USER
  SELLER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum CarStatus {
  PENDING     // في انتظار الموافقة
  APPROVED    // معتمدة
  REJECTED    // مرفوضة
} 