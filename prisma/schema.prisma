generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Car {
  id              Int       @id @default(autoincrement())
  name            String
  brand           String
  year            Int
  price           Float
  mileage         Int?
  fuelType        String?
  transmission    String?
  color           String?
  description     String?
  imageUrl        String?
  images          String[]  @default([])
  contactName     String?
  contactPhone    String?
  contactLocation String?
  contactEmail    String?
  isAvailable     Boolean   @default(true)
  featured        Boolean   @default(false)
  status          CarStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sellerId        Int?
  seller          User?     @relation(fields: [sellerId], references: [id])
  orders          Order[]
  reviews         Review[]

  @@map("cars")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String?
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cars      Car[]
  orders    Order[]
  reviews   Review[]

  @@map("users")
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  carId      Int
  status     OrderStatus @default(PENDING)
  totalPrice Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  car        Car         @relation(fields: [carId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  carId     Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  car       Car      @relation(fields: [carId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Booking {
  id            Int           @id @default(autoincrement())
  carId         Int
  carName       String
  carPrice      Float
  customerName  String
  customerEmail String
  customerPhone String
  message       String?
  status        BookingStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("bookings")
}

enum UserRole {
  ADMIN
  USER
  SELLER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum CarStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONTACTED
  APPROVED
  REJECTED
  COMPLETED
}
